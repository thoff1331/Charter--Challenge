[{"/Users/trevorhoffman/Desktop/react_projects/charter/charter/src/App.js":"1","/Users/trevorhoffman/Desktop/react_projects/charter/charter/src/components/pagination.js":"2","/Users/trevorhoffman/Desktop/react_projects/charter/charter/src/reportWebVitals.js":"3"},{"size":8420,"mtime":1606360830185,"results":"4","hashOfConfig":"5"},{"size":5295,"mtime":1606267092501,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1606175929882,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"kow25c",{"filePath":"11","messages":"12","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/trevorhoffman/Desktop/react_projects/charter/charter/src/App.js",["16","17","18","19","20","21","22","23","24","25","26"],"import \"./App.css\";\nimport Pagination from \"./components/pagination\";\nimport stateOptions from \"./data/stateOPtions.json\";\nimport filterOptions from \"./data/filterOptions.json\";\nimport React from \"react\";\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      allItems: [],\n      currentItems: [],\n      currentPage: null,\n      totalPages: null,\n      searchTerm: \"\",\n      genre: null,\n      location: null,\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://code-challenge.spectrumtoolbox.com/api/restaurants\", {\n      headers: {\n        Authorization: \"Api-Key q3MNxtfep8Gt\",\n      },\n    })\n      .then((res) => res.json())\n      .then((allItems) => {\n        this.setState({\n          allItems,\n        });\n      });\n  }\n  onChangePage = (data) => {\n    const { allItems } = this.state;\n    const { currentPage, totalPages, pageLimit } = data;\n    const offset = (currentPage - 1) * pageLimit;\n    const currentItems = allItems.slice(offset, offset + pageLimit);\n\n    this.setState({ currentPage, currentItems, totalPages });\n  };\n  tableData = (items) => {\n    return items.map((restaurant, index) => {\n      return (\n        <tr key={index}>\n          <td>{restaurant.name}</td>\n          <td>{restaurant.address1}</td>\n          <td>{restaurant.city}</td>\n          <td>{restaurant.state}</td>\n          <td>{restaurant.telephone}</td>\n          <td>{restaurant.genre}</td>\n          <td>{restaurant.attire}</td>\n        </tr>\n      );\n    });\n  };\n  createHeader = () => {\n    let header = [\n      \"Name\",\n      \"Address\",\n      \"City\",\n      \"State\",\n      \"Phone Number\",\n      \"Genre\",\n      \"Attire\",\n    ];\n    return header.map((row, index) => {\n      return <th key={index}>{row.toUpperCase()}</th>;\n    });\n  };\n  editSearchTerm = (e) => {\n    this.setState({ searchTerm: e.target.value });\n  };\n  dynamicSearch = () => {\n    return this.state.allItems.filter(\n      (name) =>\n        name.includes(this.state.searchTerm) ||\n        name.city === this.state.searchTerm ||\n        name.genre.includes(this.state.searchTerm)\n    );\n  };\n  handleGenreChange = (event) => {\n    this.setState({ genre: event.target.value });\n  };\n\n  handleLocationChange = (event) => {\n    this.setState({ location: event.target.value });\n  };\n  resetFilters = () => {\n    this.setState({\n      location: stateOptions[0].label,\n      genre: null,\n    });\n    window.location.reload();\n  };\n  render() {\n    const {\n      allItems,\n      currentItems,\n      currentPage,\n      totalPages,\n      itemsOnPage,\n    } = this.state;\n    const totalItems = allItems.length;\n    const sortedItems = this.state.allItems.sort(function (a, b) {\n      if (a.name < b.name) {\n        return -1;\n      }\n      if (a.name > b.name) {\n        return 1;\n      }\n      return 0;\n    });\n    const searched = [];\n    const filteredRestaurants = allItems.map((restaurant) => {\n      if (\n        restaurant.name\n          .toUpperCase()\n          .includes(this.state.searchTerm.toUpperCase()) ||\n        restaurant.city.startsWith(this.state.searchTerm) ||\n        restaurant.genre.includes(this.state.searchTerm)\n      ) {\n        return searched.push(restaurant);\n      }\n    });\n    const genreArray = [];\n    const genreFiltered = allItems.map((restaurant) => {\n      if (restaurant.genre.includes(this.state.genre)) {\n        genreArray.push(restaurant);\n      }\n    });\n    const locationArray = [];\n    const locationFiltered = allItems.map((restaurant) => {\n      if (restaurant.state === this.state.location) {\n        locationArray.push(restaurant);\n      }\n    });\n    const bothFiltersActive = [];\n\n    const bothFilters = allItems.map((restaurant) => {\n      if (\n        restaurant.state === this.state.location &&\n        restaurant.genre.includes(this.state.genre) &&\n        restaurant.name.includes(this.state.searchTerm)\n      ) {\n        bothFiltersActive.push(restaurant);\n      }\n    });\n    const searchAndGenreActive = [];\n\n    const searchAndGenre = allItems.map((restaurant) => {\n      if (\n        restaurant.genre.includes(this.state.genre) &&\n        restaurant.name.includes(this.state.searchTerm)\n      ) {\n        searchAndGenreActive.push(restaurant);\n      }\n    });\n\n    if (totalItems === 0) return null;\n    const headerClass = [\n      \"text-dark py-2 pr-4 m-0\",\n      currentPage ? \"border-gray border-right\" : \"\",\n    ]\n      .join(\" \")\n      .trim();\n\n    return (\n      <div className=\"pageContainer\">\n        <div className=\"row d-flex flex-row py-5\">\n          <div className=\"w-100 px-4 py-5 d-flex flex-row flex-wrap align-items-center justify-content-between\">\n            <div className=\"d-flex flex-row py-4 align-items-center\"></div>\n          </div>\n          <h1 className=\"title\">Choose A Restaurant</h1>\n          <div className=\"restaurantCount\">\n            <h4 className={headerClass}>\n              <strong>{totalItems}</strong> Restaurants to Choose From\n            </h4>\n          </div>\n\n          <div className=\"search\">\n            <input\n              value={this.state.searchTerm}\n              onChange={this.editSearchTerm}\n              placeholder=\"Search by Name,City, or Genre\"\n            />\n          </div>\n          <div className=\"filter-form\">\n            <div className=\"filters\">\n              <label>Select A State </label>\n              <select\n                value={this.state.location || \"\"}\n                name={this.state.location}\n                id={this.state.location}\n                onChange={this.handleLocationChange}\n              >\n                {stateOptions.map((abbr, index) => {\n                  return <option value={abbr.value}>{abbr.value}</option>;\n                })}\n              </select>\n              <h3 className=\"resetFilters\" onClick={this.resetFilters}>\n                Reset Filters\n              </h3>\n              <label>Select a Genre</label>\n              <select\n                value={this.state.genre || \"\"}\n                name={this.state.genre}\n                id={this.state.genre}\n                onChange={this.handleGenreChange}\n              >\n                {filterOptions\n                  .sort(function (a, b) {\n                    if (a.label < b.label) {\n                      return -1;\n                    }\n                    if (a.label > b.label) {\n                      return 1;\n                    }\n                    return 0;\n                  })\n                  .map((genre, index) => {\n                    return (\n                      <option key={index} value={genre.value}>\n                        {genre.value}\n                      </option>\n                    );\n                  })}\n              </select>\n            </div>\n          </div>\n          <div className=\"filter\">\n            <table id=\"myTable\" className=\"restaurants\">\n              <tbody>\n                <tr>{this.createHeader()}</tr>\n                {this.state.location != null && this.state.genre != null\n                  ? this.tableData(bothFiltersActive)\n                  : this.state.genre != null && this.state.searchTerm != \"\"\n                  ? this.tableData(searchAndGenreActive)\n                  : this.state.searchTerm === \"\" &&\n                    this.state.location === null &&\n                    this.state.genre === null\n                  ? this.tableData(currentItems)\n                  : this.state.location != null\n                  ? this.tableData(locationArray)\n                  : this.state.genre != null\n                  ? this.tableData(genreArray)\n                  : this.state.location != null &&\n                    this.state.genre != null &&\n                    this.state.searchTerm === \"\"\n                  ? this.tableData(\n                      searched.concat(genreFiltered, locationFiltered)\n                    )\n                  : this.tableData(searched)}\n              </tbody>\n            </table>\n          </div>\n          <Pagination\n            totalRecords={totalItems}\n            pageLimit={10}\n            pageNeighbours={1}\n            onPageChanged={this.onChangePage}\n          />\n          {currentPage && (\n            <span className=\"currentPage\">\n              Page <span className=\"font-weight-bold\">{currentPage}</span> /{\" \"}\n              <span className=\"font-weight-bold\">{totalPages}</span>\n            </span>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/Users/trevorhoffman/Desktop/react_projects/charter/charter/src/components/pagination.js",["27","28","29"],"import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst LEFT_PAGE = \"LEFT\";\nconst RIGHT_PAGE = \"RIGHT\";\n\nconst range = (from, to, step = 1) => {\n  let i = from;\n  const range = [];\n\n  while (i <= to) {\n    range.push(i);\n    i += step;\n  }\n\n  return range;\n};\n\nclass Pagination extends Component {\n  constructor(props) {\n    super(props);\n    const { totalRecords = null, pageLimit = 10, pageNeighbours = 0 } = props;\n\n    this.pageLimit = typeof pageLimit === \"number\" ? pageLimit : 30;\n    this.totalRecords = typeof totalRecords === \"number\" ? totalRecords : 0;\n\n    this.pageNeighbours =\n      typeof pageNeighbours === \"number\"\n        ? Math.max(0, Math.min(pageNeighbours, 2))\n        : 0;\n\n    this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\n\n    this.state = { currentPage: 1 };\n  }\n\n  componentDidMount() {\n    this.gotoPage(1);\n  }\n\n  gotoPage = (page) => {\n    const { onPageChanged = (f) => f } = this.props;\n\n    const currentPage = Math.max(0, Math.min(page, this.totalPages));\n\n    const paginationData = {\n      currentPage,\n      totalPages: this.totalPages,\n      pageLimit: this.pageLimit,\n      totalRecords: this.totalRecords,\n    };\n\n    this.setState({ currentPage }, () => onPageChanged(paginationData));\n  };\n\n  handleClick = (page, evt) => {\n    evt.preventDefault();\n    this.gotoPage(page);\n  };\n\n  handleMoveLeft = (evt) => {\n    evt.preventDefault();\n    this.gotoPage(this.state.currentPage - this.pageNeighbours * 2 - 1);\n  };\n\n  handleMoveRight = (evt) => {\n    evt.preventDefault();\n    this.gotoPage(this.state.currentPage + this.pageNeighbours * 2 + 1);\n  };\n\n  fetchPageNumbers = () => {\n    const totalPages = this.totalPages;\n    const currentPage = this.state.currentPage;\n    const pageNeighbours = this.pageNeighbours;\n\n    const totalNumbers = this.pageNeighbours * 2 + 3;\n    const totalBlocks = totalNumbers + 2;\n\n    if (totalPages > totalBlocks) {\n      let pages = [];\n\n      const leftBound = currentPage - pageNeighbours;\n      const rightBound = currentPage + pageNeighbours;\n      const beforeLastPage = totalPages - 1;\n\n      const startPage = leftBound > 2 ? leftBound : 2;\n      const endPage = rightBound < beforeLastPage ? rightBound : beforeLastPage;\n\n      pages = range(startPage, endPage);\n\n      const pagesCount = pages.length;\n      const singleSpillOffset = totalNumbers - pagesCount - 1;\n\n      const leftSpill = startPage > 2;\n      const rightSpill = endPage < beforeLastPage;\n\n      const leftSpillPage = LEFT_PAGE;\n      const rightSpillPage = RIGHT_PAGE;\n\n      if (leftSpill && !rightSpill) {\n        const extraPages = range(startPage - singleSpillOffset, startPage - 1);\n        pages = [leftSpillPage, ...extraPages, ...pages];\n      } else if (!leftSpill && rightSpill) {\n        const extraPages = range(endPage + 1, endPage + singleSpillOffset);\n        pages = [...pages, ...extraPages, rightSpillPage];\n      } else if (leftSpill && rightSpill) {\n        pages = [leftSpillPage, ...pages, rightSpillPage];\n      }\n\n      return [1, ...pages, totalPages];\n    }\n\n    return range(1, totalPages);\n  };\n\n  render() {\n    if (!this.totalRecords) return null;\n\n    if (this.totalPages === 1) return null;\n\n    const { currentPage } = this.state;\n    const pages = this.fetchPageNumbers();\n\n    return (\n      <Fragment>\n        <nav aria-label=\"Restaurants Pagination\">\n          <ul className=\"pagination\">\n            {pages.map((page, index) => {\n              if (page === LEFT_PAGE)\n                return (\n                  <li key={index} className=\"page-item\">\n                    <a\n                      className=\"page-link\"\n                      href=\"#\"\n                      aria-label=\"Previous\"\n                      onClick={this.handleMoveLeft}\n                    >\n                      <span aria-hidden=\"true\">&laquo;</span>\n                      <span className=\"sr-only\">Previous</span>\n                    </a>\n                  </li>\n                );\n\n              if (page === RIGHT_PAGE)\n                return (\n                  <li key={index} className=\"page-item\">\n                    <a\n                      className=\"page-link\"\n                      href=\"#\"\n                      aria-label=\"Next\"\n                      onClick={this.handleMoveRight}\n                    >\n                      <span aria-hidden=\"true\">&raquo;</span>\n                      <span className=\"sr-only\">Next</span>\n                    </a>\n                  </li>\n                );\n\n              return (\n                <li\n                  key={index}\n                  className={`page-item${\n                    currentPage === page ? \" active\" : \"\"\n                  }`}\n                >\n                  <a\n                    className=\"page-link\"\n                    href=\"#\"\n                    onClick={(e) => this.handleClick(page, e)}\n                  >\n                    {page}\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n        </nav>\n      </Fragment>\n    );\n  }\n}\n\nPagination.propTypes = {\n  totalRecords: PropTypes.number.isRequired,\n  pageLimit: PropTypes.number,\n  pageNeighbours: PropTypes.number,\n  onPageChanged: PropTypes.func,\n};\n\nexport default Pagination;\n","/Users/trevorhoffman/Desktop/react_projects/charter/charter/src/reportWebVitals.js",[],{"ruleId":"30","severity":1,"message":"31","line":101,"column":7,"nodeType":"32","messageId":"33","endLine":101,"endColumn":18},{"ruleId":"30","severity":1,"message":"34","line":104,"column":11,"nodeType":"32","messageId":"33","endLine":104,"endColumn":22},{"ruleId":"30","severity":1,"message":"35","line":114,"column":11,"nodeType":"32","messageId":"33","endLine":114,"endColumn":30},{"ruleId":"36","severity":1,"message":"37","line":114,"column":59,"nodeType":"38","messageId":"39","endLine":114,"endColumn":61},{"ruleId":"36","severity":1,"message":"40","line":126,"column":53,"nodeType":"38","messageId":"41","endLine":126,"endColumn":55},{"ruleId":"36","severity":1,"message":"40","line":132,"column":56,"nodeType":"38","messageId":"41","endLine":132,"endColumn":58},{"ruleId":"30","severity":1,"message":"42","line":139,"column":11,"nodeType":"32","messageId":"33","endLine":139,"endColumn":22},{"ruleId":"36","severity":1,"message":"40","line":139,"column":51,"nodeType":"38","messageId":"41","endLine":139,"endColumn":53},{"ruleId":"30","severity":1,"message":"43","line":150,"column":11,"nodeType":"32","messageId":"33","endLine":150,"endColumn":25},{"ruleId":"36","severity":1,"message":"40","line":150,"column":54,"nodeType":"38","messageId":"41","endLine":150,"endColumn":56},{"ruleId":"44","severity":1,"message":"45","line":236,"column":71,"nodeType":"46","messageId":"47","endLine":236,"endColumn":73},{"ruleId":"48","severity":1,"message":"49","line":132,"column":21,"nodeType":"50","endLine":137,"endColumn":22},{"ruleId":"48","severity":1,"message":"49","line":147,"column":21,"nodeType":"50","endLine":152,"endColumn":22},{"ruleId":"48","severity":1,"message":"49","line":166,"column":19,"nodeType":"50","endLine":170,"endColumn":20},"no-unused-vars","'itemsOnPage' is assigned a value but never used.","Identifier","unusedVar","'sortedItems' is assigned a value but never used.","'filteredRestaurants' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","expectedInside","'bothFilters' is assigned a value but never used.","'searchAndGenre' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]